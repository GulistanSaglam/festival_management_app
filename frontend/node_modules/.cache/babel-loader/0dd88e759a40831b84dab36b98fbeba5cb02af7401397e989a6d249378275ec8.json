{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gulis\\\\Desktop\\\\festival_app\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Events() {\n  _s();\n  const data = useLoaderData();\n\n  // if (data.isError) {\n  //     return <p>{data.message}</p>\n  // }\n\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Events, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = Events;\nexport default Events;\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/eventssss');\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' }\n    throw new Error();\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","Events","_s","data","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","Error","$RefreshReg$"],"sources":["C:/Users/gulis/Desktop/festival_app/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData } from 'react-router-dom';\r\n\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction Events() {\r\n    const data = useLoaderData();\r\n\r\n    // if (data.isError) {\r\n    //     return <p>{data.message}</p>\r\n    // }\r\n\r\n    const events = data.events;\r\n\r\n    return (\r\n        <>\r\n            <EventsList events={events} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Events;\r\n\r\nexport async function loader() {\r\n    const response = await fetch('http://localhost:8080/eventssss');\r\n\r\n    if (!response.ok) {\r\n        // return { isError: true, message: 'Could not fetch events.' }\r\n        throw new Error\r\n    } else {\r\n        return response;\r\n    }\r\n}"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAEhD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAMC,IAAI,GAAGR,aAAa,CAAC,CAAC;;EAE5B;EACA;EACA;;EAEA,MAAMS,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,oBACIN,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACIP,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAChC,CAAC;AAEX;AAACP,EAAA,CAdQD,MAAM;EAAA,QACEN,aAAa;AAAA;AAAAe,EAAA,GADrBT,MAAM;AAgBf,eAAeA,MAAM;AAErB,OAAO,eAAeU,MAAMA,CAAA,EAAG;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;EAE/D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA,MAAM,IAAIC,KAAK,CAAD,CAAC;EACnB,CAAC,MAAM;IACH,OAAOH,QAAQ;EACnB;AACJ;AAAC,IAAAF,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}